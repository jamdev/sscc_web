---
//Show all documents:
//<DocumentList documents={documents} />
//Show specific categories:
//<DocumentList documents={documents} categories={["Reports"]} />
//Show multiple categories:
//<DocumentList documents={documents} categories={["Reports", "Finance"]} />

// DocumentList.astro
export interface Document {
    name: string;
    date: string; // Format: 'YYYY-MM-DD'
    url: string;
    icon: string; // Path to PNG file
    category: string; // Category name
    categoryIcon: string; // Path to category icon PNG file
    openInNewTab?: boolean; // Whether to open URL in new tab (default: false)
}

export interface Props {
    documents: Document[];
    categories?: string[]; // Optional array of category names to filter by
    debug?: boolean; // Enable debug console output
}

const { documents = [], categories = [], debug = false } = Astro.props;

function parseDate(dateStr: string): Date {
    return new Date(dateStr + "T00:00:00");
}

function formatDocumentDate(dateStr: string): string {
    const date = parseDate(dateStr);
    const monthNames = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ];

    const dayNumber = date.getDate();
    const monthName = monthNames[date.getMonth()];
    const yearNumber = date.getFullYear();

    return `${dayNumber} ${monthName} ${yearNumber}`;
}

// Filter documents by categories if provided
const filteredDocuments =
    categories.length > 0
        ? documents.filter((doc) => categories.includes(doc.category))
        : documents;

// Group documents by category
const documentsByCategory = filteredDocuments.reduce(
    (acc, doc) => {
        if (!acc[doc.category]) {
            acc[doc.category] = [];
        }
        acc[doc.category].push(doc);
        return acc;
    },
    {} as Record<string, Document[]>,
);

// Sort categories alphabetically and documents within each category by name
const sortedCategories = Object.keys(documentsByCategory).sort();
const groupedDocuments = sortedCategories.map((category) => ({
    category,
    categoryIcon: documentsByCategory[category][0].categoryIcon,
    documents: documentsByCategory[category].sort((a, b) =>
        a.name.localeCompare(b.name),
    ),
}));
---

<div class="document-list-wrapper" data-debug={debug}>
    <div class="document-list">
        <div class="document-items">
            {
                groupedDocuments.length === 0 ? (
                    <div class="no-documents">
                        <p>No documents available</p>
                    </div>
                ) : (
                    groupedDocuments.map((group) => (
                        <div class="category-group">
                            <div class="category-header">
                                <div class="category-circle">
                                    <img
                                        src={group.categoryIcon}
                                        alt={`${group.category} icon`}
                                    />
                                </div>
                                <div class="category-info">
                                    <div class="category-name">
                                        {group.category}
                                    </div>
                                </div>
                            </div>
                            {group.documents.map((document) => (
                                <div
                                    class="document-entry clickable"
                                    data-url={document.url}
                                    data-new-tab={
                                        document.openInNewTab ? "true" : "false"
                                    }
                                >
                                    <div class="document-icon">
                                        <img
                                            src={document.icon}
                                            alt={`${document.name} icon`}
                                        />
                                    </div>
                                    <div class="document-details">
                                        <div class="document-name">
                                            {document.name}
                                        </div>
                                        <div class="document-date">
                                            {formatDocumentDate(document.date)}
                                        </div>
                                    </div>
                                    <div class="document-arrow">
                                        <svg
                                            width="16"
                                            height="16"
                                            viewBox="0 0 24 24"
                                            fill="currentColor"
                                        >
                                            <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z" />
                                        </svg>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ))
                )
            }
        </div>
    </div>
</div>

<style>
    .document-list-wrapper {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding: 1rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .document-list {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .document-items {
        padding: 1rem;
    }

    .no-documents {
        text-align: center;
        padding: 3rem 1rem;
        color: #6c757d;
    }

    .no-documents p {
        margin: 0;
        font-size: 1.125rem;
    }

    .category-group {
        margin-bottom: 2rem;
    }

    .category-group:last-child {
        margin-bottom: 0;
    }

    .category-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e9ecef;
    }

    .category-circle {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 50px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        flex-shrink: 0;
        overflow: hidden;
    }

    .category-circle img {
        width: 24px;
        height: 24px;
        object-fit: contain;
        filter: brightness(0) invert(1);
    }

    .category-info {
        flex: 1;
    }

    .category-name {
        font-size: 1.125rem;
        font-weight: 600;
        color: #495057;
    }

    .document-entry {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        margin-bottom: 0.5rem;
        border-radius: 8px;
        background: #f8f9fa;
        transition: all 0.2s ease;
        border-left: 4px solid #667eea;
        cursor: pointer;
    }

    .document-entry:last-child {
        margin-bottom: 0;
    }

    .document-entry:hover {
        background: #e9ecef;
        transform: translateX(4px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .document-icon {
        width: 40px;
        height: 40px;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        border-radius: 8px;
        padding: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .document-icon img {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }

    .document-details {
        flex: 1;
        min-width: 0;
    }

    .document-name {
        font-size: 1rem;
        font-weight: 600;
        color: #212529;
        margin-bottom: 0.25rem;
        line-height: 1.3;
        word-wrap: break-word;
    }

    .document-date {
        font-size: 0.875rem;
        color: #6c757d;
        line-height: 1.4;
        margin: 0;
    }

    .document-arrow {
        color: #adb5bd;
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .document-entry:hover .document-arrow {
        opacity: 1;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .document-list-wrapper {
            padding: 0.5rem;
            gap: 1rem;
        }

        .document-entry {
            padding: 0.75rem;
        }

        .document-icon {
            width: 32px;
            height: 32px;
            padding: 6px;
        }

        .document-name {
            font-size: 0.9rem;
        }

        .document-date {
            font-size: 0.8rem;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Check if debugging is enabled
        const wrapper = document.querySelector(".document-list-wrapper");
        const isDebug = wrapper?.getAttribute("data-debug") === "true";

        function debugLog(...args) {
            if (isDebug) {
                console.log(...args);
            }
        }

        debugLog("DocumentList script loaded - DOM ready");

        // Find all clickable document entries
        const documentEntries = document.querySelectorAll(
            ".document-entry.clickable",
        );
        debugLog("Found document entries:", documentEntries.length);

        // Handle document entry clicks
        function setupDocumentHandler(element, debugName) {
            element.addEventListener("click", function (e) {
                debugLog(`${debugName} clicked!`);

                e.preventDefault();
                e.stopPropagation();

                const url = this.getAttribute("data-url");
                const newTab = this.getAttribute("data-new-tab") === "true";

                if (url) {
                    debugLog("Navigating to:", url, "New tab:", newTab);
                    if (newTab) {
                        window.open(url, "_blank", "noopener,noreferrer");
                    } else {
                        window.location.href = url;
                    }
                }
            });

            // Add keyboard accessibility
            element.setAttribute("tabindex", "0");
            element.setAttribute("role", "button");

            element.addEventListener("keydown", function (e) {
                if (e.key === "Enter" || e.key === " ") {
                    debugLog(`${debugName} keyboard navigation triggered`);
                    e.preventDefault();
                    this.click();
                }
            });
        }

        // Setup click handlers for all document entries
        documentEntries.forEach((entry, index) => {
            const documentName =
                entry.querySelector(".document-name")?.textContent;
            debugLog(`Setting up document ${index + 1}: ${documentName}`);
            setupDocumentHandler(entry, `document-${index + 1}`);
        });

        debugLog("DocumentList script setup complete");
    });
</script>
